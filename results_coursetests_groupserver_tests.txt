============================= test session starts ==============================
platform linux -- Python 3.7.3, pytest-6.2.3, py-1.10.0, pluggy-0.13.1
rootdir: /tmp_amd/kamen/export/kamen/3/cs1531/automark/tempstore, configfile: pytest.ini
plugins: forked-1.3.0, xdist-2.2.1, hypothesis-6.1.1, timeout-1.4.2
collected 343 items

http_tests/admin_tests/test_admin_user_remove.py EEEEEEsEEEE             [  3%]
http_tests/admin_tests/test_admin_userpermission_change.py EEEEEE        [  4%]
http_tests/auth_tests/test_auth_login.py EE.E                            [  6%]
http_tests/auth_tests/test_auth_logout.py EE                             [  6%]
http_tests/auth_tests/test_auth_register.py .........................EFF [ 14%]
F                                                                        [ 15%]
http_tests/auth_tests/test_passwordreset_request.py EEs                  [ 16%]
http_tests/auth_tests/test_passwordreset_reset.py ..                     [ 16%]
http_tests/channel_tests/test_channel_addowner.py sEsEEEsEE              [ 19%]
http_tests/channel_tests/test_channel_details.py EEEE                    [ 20%]
http_tests/channel_tests/test_channel_invite.py sEEEEEE                  [ 22%]
http_tests/channel_tests/test_channel_join.py EEEsEE                     [ 24%]
http_tests/channel_tests/test_channel_leave.py EEEE                      [ 25%]
http_tests/channel_tests/test_channel_messages.py EEEEEEEE               [ 27%]
http_tests/channel_tests/test_channel_removeowner.py EEEEEEsEE           [ 30%]
http_tests/channels_tests/test_channels_create.py EEEEE                  [ 31%]
http_tests/channels_tests/test_channels_list.py EEEEEEEEE                [ 34%]
http_tests/channels_tests/test_channels_listall.py EEEEE                 [ 35%]
http_tests/dm_tests/test_dm_create.py EEEEE                              [ 37%]
http_tests/dm_tests/test_dm_details.py EEEE                              [ 38%]
http_tests/dm_tests/test_dm_invite.py sEEEEE                             [ 40%]
http_tests/dm_tests/test_dm_leave.py EEEE                                [ 41%]
http_tests/dm_tests/test_dm_list.py EEEEE                                [ 42%]
http_tests/dm_tests/test_dm_messages.py EEEEEEEE                         [ 45%]
http_tests/dm_tests/test_dm_remove.py EEEEE                              [ 46%]
http_tests/echo_tests/echo_test.py ..                                    [ 47%]
http_tests/message_tests/test_message_edit.py EEEEEEEE                   [ 49%]
http_tests/message_tests/test_message_meta.py E                          [ 49%]
http_tests/message_tests/test_message_pin.py EEEEEEEE                    [ 52%]
http_tests/message_tests/test_message_react.py EEEEEEE                   [ 54%]
http_tests/message_tests/test_message_remove.py EEEEEE                   [ 55%]
http_tests/message_tests/test_message_send.py EEsEE                      [ 57%]
http_tests/message_tests/test_message_senddm.py EEsEE                    [ 58%]
http_tests/message_tests/test_message_sendlater.py EEEEEE                [ 60%]
http_tests/message_tests/test_message_sendlaterdm.py EEEEEE              [ 62%]
http_tests/message_tests/test_message_share.py EEEEEEssssssE             [ 66%]
http_tests/message_tests/test_message_unpin.py EEEEEEEE                  [ 68%]
http_tests/message_tests/test_message_unreact.py EEEEEEE                 [ 70%]
http_tests/other_tests/test_clear.py E                                   [ 70%]
http_tests/other_tests/test_notifications_get.py EEsssEEEEEEEsEEEE       [ 75%]
http_tests/other_tests/test_search.py EEEEEEEE                           [ 78%]
http_tests/other_tests/test_users_all.py EE                              [ 78%]
http_tests/standup_tests/test_standup_active.py EEEEEE                   [ 80%]
http_tests/standup_tests/test_standup_send.py EEEEEEE                    [ 82%]
http_tests/standup_tests/test_standup_start.py EEEsEEEEE                 [ 85%]
http_tests/stats_tests/test_user_stats.py EEEEEEEEEEEEEEEEEE             [ 90%]
http_tests/user_tests/test_user_profile.py EEE                           [ 91%]
http_tests/user_tests/test_user_profile_setemail.py EEEEEEEEE            [ 93%]
http_tests/user_tests/test_user_profile_sethandle.py EEEEEEE             [ 95%]
http_tests/user_tests/test_user_profile_setname.py EEEEEE                [ 97%]
http_tests/user_tests/test_user_profile_uploadphoto.py EEEEEEEE          [100%]

==================================== ERRORS ====================================
_______________ ERROR at setup of test_removal_can_do_no_action ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3daf11510>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_removal_messages_correct_format ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dae3bf28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_removal_profile_still_fetchable ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dae259d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_removal_removed_from_channel ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dae25f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_removal_removed_from_dm ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dae1bb70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_removal_not_in_users_all ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dae1bc80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_user ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dade3d90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_cannot_remove_last_owner ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dada3620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
______________ ERROR at setup of test_cannot_remove_user_nonowner ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dada3ea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dadb2840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_successful_permission_change ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dadb2950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
________ ERROR at setup of test_changing_to_same_permission_idempotent _________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dae8e950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________ ERROR at setup of test_nonowner_cant_change_permissions ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dae8ee18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_user ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dae9aae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_invalid_permission ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dae9ae18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dae5fc80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_successful_login ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dad5c598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_can_have_two_sessions _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dad5cea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________ ERROR at setup of test_registered_but_incorrect_password ___________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dad6ba60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_successful_logout ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dad6bf28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_not_logged_in_logout __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dad94950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_successful_registration ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dad94e18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_return_format_correct _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dad8dd08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_________ ERROR at setup of test_password_request_logs_out_everywhere __________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dad3ea60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
________ ERROR at setup of test_channel_owner_can_addowner_when_member _________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dad46400>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
______________ ERROR at setup of test_non_member_cannot_add_owner ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dad8da60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_member_cannot_add_owner ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dad57730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______ ERROR at setup of test_cannot_addowner_prexisting_channel_owner ________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dad57f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_with_invalid_channel_id ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dacfd950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dacfdd08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_member_successful ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dad10ae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_non_member_not_successful _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dad10378>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_invalid_channel_id ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dad06c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3daca2598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_invite_global_owner __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3daca2ea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_invite_global_member __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dacba730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________ ERROR at setup of test_invitation_from_non_channel_member ___________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dacbaf28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_channel_id_invalid ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dacc88c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_u_id_invalid ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dacc8400>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dac74a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________ ERROR at setup of test_global_owner_join_channel_public ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dac74f28>

    @pytest.fixture
    def user_buzz(user_factory):
>       return user_factory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

http_tests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________ ERROR at setup of test_global_owner_join_channel_private ___________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dac6ab70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_global_member_join_public _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dac6ac80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_join_invalid_channel_id ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dac81e18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dac1e6a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________ ERROR at setup of test_member_leave_channel_successfully ___________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dac1eea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_leave_channel_when_not_member _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dac297b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_invalid_channel_id ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dac29ae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dac38950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_under_fifty_messages_sent _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dac38e18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_over_fifty_messages_sent ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dabddae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_removal_by_edit_reflected _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dabdde18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_removal_by_deletion_reflected _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dabeac80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____ ERROR at setup of test_input_error_when_start_greater_than_message_num ____

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dac04598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_________ ERROR at setup of test_access_error_when_user_is_non_member __________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dac04ea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________ ERROR at setup of test_input_error_when_channel_id_invalid __________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dabb47b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_________ ERROR at setup of test_access_error_when_invalid_token_given _________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dabb48c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_owner_can_remove_owner _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dabac8c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_global_owner_can_remove_owner _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dabac9d8>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_nonmember_cannot_remove_owner _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dabb8ae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
______________ ERROR at setup of test_member_cannot_remove_owner _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dabb8598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_cannot_remove_last_owner ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dad3e0d0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_cannot_remove_non_owner ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dabd57b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_with_invalid_channel_id ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dab64ae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dab64ea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_create_channel[True-andys room] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dab75bf8>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________ ERROR at setup of test_create_channel[False-andys room] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dab90598>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_ ERROR at setup of test_channel_name_length[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] _

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dab90d90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_ ERROR at setup of test_channel_name_length[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] _

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dab246a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dab24f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_when_in_no_channels __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dab318c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_when_in_one_channel[True-andy] _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dab316a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_when_in_one_channel[False-andy] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dab4b9d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____ ERROR at setup of test_when_in_multiple_channels[False-True-ZERG-andy] ____

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dab4bf28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___ ERROR at setup of test_when_in_multiple_channels[False-False-ZERG-andy] ____

user_factory = <function user_factory.<locals>.make_user at 0x7ff3daadfb70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____ ERROR at setup of test_when_in_multiple_channels[True-True-ZERG-andy] _____

user_factory = <function user_factory.<locals>.make_user at 0x7ff3daadfc80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____ ERROR at setup of test_when_in_multiple_channels[True-False-ZERG-andy] ____

user_factory = <function user_factory.<locals>.make_user at 0x7ff3daaf3d08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_list_after_leave_channel ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dab06620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3dab06f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_when_no_channels ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3daaa6840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_when_one_channel_exists_private ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3daaa6950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_when_one_channel_exists_public _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3daaca950>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_when_multiple_channels_exist ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3daacae18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3daabab70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_successful_dm_creation _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3daabac80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_dm_name_creation_single ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3daa72c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_dm_name_creation_multiple _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3daa6b620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_dm_to_invalid_user ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3daa6be18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3daa96730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_member_successful ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3daa96f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_non_member_not_successful _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3daa328c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_dm_id _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3daa32ea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3daa1da60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_invite_global_member __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3daa1df28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_invitation_from_non_dm_member _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3daa40c80>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_dm_id_invalid _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3daa40730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_u_id_invalid ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3daa45d90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da9e66a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_member_leave_dm_successfully ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da9e6f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_leave_channel_when_not_member _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da9fb8c8>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_dm_id _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da9fb400>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3daa119d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________________ ERROR at setup of test_when_in_no_dms _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3daa11f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________________ ERROR at setup of test_when_in_one_dm _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da9a2b70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_when_in_multiple_dms __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da9a2c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_list_after_leave_dm __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da9bfd08>

    @pytest.fixture
    def user_buzz(user_factory):
>       return user_factory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

http_tests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da9b8620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_under_fifty_messages_sent _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da9b8f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_over_fifty_messages_sent ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da965840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_removal_by_edit_reflected _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da965378>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_removal_by_deletion_reflected _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da97d9d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____ ERROR at setup of test_input_error_when_start_greater_than_message_num ____

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da97df28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_________ ERROR at setup of test_access_error_when_user_is_non_member __________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da98bae8>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_input_error_when_dm_id_invalid _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da98be18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_________ ERROR at setup of test_access_error_when_invalid_token_given _________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da923c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_successful_dm_removal _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da92d598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_removal_removes_messages ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da92dea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_nonowner_cannot_remove_dm _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da94d7b8>

    @pytest.fixture
    def user_buzz(user_factory):
>       return user_factory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

http_tests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_dm_id _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da94df28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da8e18c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________ ERROR at setup of test_original_poster_can_edit_message ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da8e16a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_owner_can_edit_members_message _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da8e9a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_________ ERROR at setup of test_global_owner_can_edit_members_message _________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da8e9f28>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
______________ ERROR at setup of test_empty_edit_deletes_message _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da8f7bf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_invalid_message_length _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da8f7730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
______________ ERROR at setup of test_cannot_edit_deleted_message ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da89cd90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_nonowner_nonposter_cant_edit ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da8aa6a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da8aaf28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_message_ids_unique ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da8be8c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_successful_pin_in_channel _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da8be268>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_successful_pin_in_dm __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da8d1a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_invalid_message_id ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da8d17b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_cannot_pin_twice ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da869b70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_channel_member_cant_pin ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da869c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_dm_member_cant_pin ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da86cd90>

    @pytest.fixture
    def user_buzz(user_factory):
>       return user_factory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

http_tests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_nonmember_cant_pin ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da8936a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da893ea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
______________ ERROR at setup of test_successful_react_in_channel ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da8267b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_successful_react_to_dm_message _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da8268c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_invalid_message_id ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da83e9d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_invalid_react_id ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da83e730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_cant_react_twice ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da839b70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_nonmember_cannot_react _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da839c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da7e6c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________ ERROR at setup of test_original_poster_can_remove_message ___________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da80c620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________ ERROR at setup of test_owner_can_remove_members_message ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da80ce18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
________ ERROR at setup of test_global_owner_can_remove_members_message ________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da8137b8>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_cannot_remove_deleted_message _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da813f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
________ ERROR at setup of test_nonowner_nonposter_cant_remove_message _________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da7a3950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da7a36a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_valid_message _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da7b1a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________________ ERROR at setup of test_nonmember_post _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da7b1f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________________ ERROR at setup of test_invalid_message ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da7c1c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da7c1488>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_valid_message _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da767d90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________________ ERROR at setup of test_nonmember_post _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da778730>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________________ ERROR at setup of test_invalid_message ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da778ae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da789840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_valid_future_message __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da789950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_nonmeber_cannot_sendlater _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da71f9d8>

    @pytest.fixture
    def user_buzz(user_factory):
>       return user_factory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

http_tests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_cannot_time_travel ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da71fea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_message_too_long ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da72dbf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________________ ERROR at setup of test_invalid_channel ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da72d730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da747d90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_valid_future_message __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da6f4620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_nonmeber_cannot_sendlater _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da6f4ea0>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_cannot_time_travel ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da6ef7b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_message_too_long ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da6efae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
______________________ ERROR at setup of test_invalid_dm _______________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da7139d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da713510>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
______________ ERROR at setup of test_successful_share_to_channel ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da69cae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_successful_share_to_dm _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da69ce18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_successful_cross_share[True] ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da6a4c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_successful_cross_share[False] _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da6bd598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
______________ ERROR at setup of test_cannot_share_to_unjoined_dm ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da6bde18>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________ ERROR at setup of test_cannot_share_to_unjoined_channel ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da663730>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da67a378>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
______________ ERROR at setup of test_successful_unpin_in_channel ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da663840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_successful_unpin_in_dm _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da67a9d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_invalid_message_id ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da688ae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_cannot_unpin_twice ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da688620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_channel_member_cant_unpin _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da695bf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_dm_member_cant_unpin __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da6957b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_nonmember_cant_unpin __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da61ce18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da6256a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_successful_unreact_in_channel _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da625f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________ ERROR at setup of test_successful_unreact_to_dm_message ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da5dd840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_invalid_message_id ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da5ddb70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_invalid_react_id ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da5e5a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_cant_unreact_twice ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da5e5598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_nonmember_cannot_unreact ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da5f7b70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da616510>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
______________________ ERROR at setup of test_clear_works ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da616d08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
______ ERROR at setup of test_tag_thru_message_send_triggers_notification ______

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da5a8620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____ ERROR at setup of test_tag_thru_message_senddm_triggers_notification _____

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da5a8ea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___ ERROR at setup of test_tag_thru_message_sendlater_triggers_notification ____

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da5c6950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__ ERROR at setup of test_tag_thru_message_sendlaterdm_triggers_notification ___

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da5c6e18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_ ERROR at setup of test_tag_notification_message_preview_length[a small message] _

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da5d3950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_ ERROR at setup of test_tag_notification_message_preview_length[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA] _

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da5d3e18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_react_triggers_notification[ch] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da56eae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_react_triggers_notification[dm] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da56ee18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______ ERROR at setup of test_add_thru_ch_invite_triggers_notification ________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da561d08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______ ERROR at setup of test_add_thru_dm_create_triggers_notification ________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da5776a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______ ERROR at setup of test_add_thru_dm_invite_triggers_notification ________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da577ea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_________ ERROR at setup of test_most_recent_20_notifications_fetched __________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da5947b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da5948c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
______________________ ERROR at setup of test_no_matches _______________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da5298c8>

    @pytest.fixture
    def user_buzz(user_factory):
>       return user_factory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

http_tests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_single_match ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da529488>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_multiple_matches ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da532a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_multiple_channels_joined ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da532f28>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_________ ERROR at setup of test_search_includes_only_joined_channels __________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da4dfbf8>

    @pytest.fixture
    def user_buzz(user_factory):
>       return user_factory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

http_tests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____ ERROR at setup of test_search_matches_more_than_just_authorised_user _____

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da4ec598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_ ERROR at setup of test_invalid_search[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] _

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da4ecd90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da5196a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_successful_users_all __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da519f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da4a1840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
______________ ERROR at setup of test_correct_return_format[True] ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da4a1950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_correct_return_format[False] ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da4ac9d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________________ ERROR at setup of test_active_standup _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da4acea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_inactive_standup ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da4c8bf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_invalid_channel_id ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da4c89d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da4c6d08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______ ERROR at setup of test_messages_buffered_and_displayed_correctly _______

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da4646a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_return_format _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da464ea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_non_member_cannot_standup_send _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da4757b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
______________ ERROR at setup of test_send_when_standup_inactive _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da4758c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_invalid_message_length _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da49a9d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_invalid_channel_id ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da49af28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da440ae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
______________ ERROR at setup of test_standup_start_return_format ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da440e18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_standup_restartable_after_lapse ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da437c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________ ERROR at setup of test_standup_affects_only_one_channel ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da445598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_standup_cannot_be_started_in_dm ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da445ea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_nonmember_cannot_start_standup _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da3e3730>

    @pytest.fixture
    def user_buzz(user_factory):
>       return user_factory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

http_tests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______ ERROR at setup of test_cannot_start_standup_when_already_active ________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da3e3a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_invalid_channel_id ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da3e9950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da3e9e18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_return_type_correct __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da403a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________ ERROR at setup of test_channels_tracked_channels_create ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da403f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_channels_tracked_channel_join _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da3a0bf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_channels_tracked_channel_invite ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da3a09d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_channels_tracked_channel_leave _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da3a6d90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________ ERROR at setup of test_channels_tracked_channel_add_owner ___________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da3bc6a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_dms_tracked_dm_create _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da3bcf28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_dms_tracked_dm_invite _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da35c8c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_dms_tracked_dm_leave __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da35c400>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_dms_tracked_dm_remove _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da36ca60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_messages_tracked_message_send _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da36cf28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________ ERROR at setup of test_messages_tracked_message_sendlater ___________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da37cb70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_messages_tracked_message_senddm ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da37cc80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_________ ERROR at setup of test_messages_tracked_message_senddmlater __________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da387d08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_messages_tracked_message_share _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da329620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_messages_tracked_standup_finish ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da329ea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_involvement_tracked __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da33c7b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da33c8c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_user_profile_valid ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da2ed950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_user ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da2ede18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da2e0ae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_successful_email_change ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da2e0e18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_cannot_change_to_taken_email ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da2fcc80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________________ ERROR at setup of test_invalid_email[] ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da316620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_invalid_email[bob] ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da316e18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
______________ ERROR at setup of test_invalid_email[a@mgail.com] _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da2a9730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_invalid_email[ab.com] _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da2a9f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_invalid_email[@gmail.com] _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da2bf8c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_invalid_email[ab@ab@gmail.com] _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da2bf9d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da2d3ae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_successful_handle_change ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da2d3620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_cannot_change_to_taken_handle _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da275c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_invalid_handle[] ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da2759d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_invalid_handle[a] ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da276d90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_invalid_handle[aa] ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da2926a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_________ ERROR at setup of test_invalid_handle[aaaaaaaaaaaaaaaaaaaaa] _________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da292f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da22f8c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_user_profile_setname_valid_name ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da22f268>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________________ ERROR at setup of test_invalid_name[-] ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da222a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_ ERROR at setup of test_invalid_name[-MRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMR] _

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da222f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_ ERROR at setup of test_invalid_name[PotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHead-] _

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da23fb70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_ ERROR at setup of test_invalid_name[PotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHead-MRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMR] _

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da23fc80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da1e1d90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_return_format_correct _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da1f7620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_cannot_upload_non_jpeg _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da1f7ea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_invalid_dimensions[-1000-0-0-0] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da1fb840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_invalid_dimensions[0--1000-0-0] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da1fb950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_invalid_dimensions[0-0--1000-0] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da19d9d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_invalid_dimensions[0-0-0--1000] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da19df28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
______________________ ERROR at setup of test_invalid_url ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da1a7b70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ff3da1a7c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
=================================== FAILURES ===================================
______________ test_handle_generation_unique[Bob-Smith-bobsmith] _______________

name_first = 'Bob', name_last = 'Smith', expected_handle = 'bobsmith'
ctx = None

    @pytest.mark.parametrize('name_first, name_last, expected_handle', [
        ('Bob', 'Smith', 'bobsmith'),
        ('ab' * 5, 'cd' * 6, f'{"ab" * 5}{"cd" * 5}')
    ])
    def test_handle_generation_unique(name_first, name_last, expected_handle, ctx):
        session = auth_register('bob.jane@gmail.com', '~~qazwsx', name_first, name_last, ctx)
    
>       actual_handle = user_profile(session['token'], session['auth_user_id'], ctx)['user']['handle_str']

http_tests/auth_tests/test_auth_register.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_ test_handle_generation_unique[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd] __

name_first = 'ababababab', name_last = 'cdcdcdcdcdcd'
expected_handle = 'abababababcdcdcdcdcd', ctx = None

    @pytest.mark.parametrize('name_first, name_last, expected_handle', [
        ('Bob', 'Smith', 'bobsmith'),
        ('ab' * 5, 'cd' * 6, f'{"ab" * 5}{"cd" * 5}')
    ])
    def test_handle_generation_unique(name_first, name_last, expected_handle, ctx):
        session = auth_register('bob.jane@gmail.com', '~~qazwsx', name_first, name_last, ctx)
    
>       actual_handle = user_profile(session['token'], session['auth_user_id'], ctx)['user']['handle_str']

http_tests/auth_tests/test_auth_register.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______________________ test_handle_generation_duplicate _______________________

ctx = None

    def test_handle_generation_duplicate(ctx):
        auth_register('bob.jane@gmail.com', '~~qazwsx', 'ab' * 5, 'cd' * 6, ctx)
        session = auth_register('jane.bob@gmail.com', '~~qazwsx', 'ab' * 5, 'cd' * 6, ctx)
    
>       actual_handle = user_profile(session['token'], session['auth_user_id'], ctx)['user']['handle_str']

http_tests/auth_tests/test_auth_register.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
=========================== short test summary info ============================
FAILED http_tests/auth_tests/test_auth_register.py::test_handle_generation_unique[Bob-Smith-bobsmith]
FAILED http_tests/auth_tests/test_auth_register.py::test_handle_generation_unique[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd]
FAILED http_tests/auth_tests/test_auth_register.py::test_handle_generation_duplicate
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_removal_can_do_no_action
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_removal_messages_correct_format
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_removal_profile_still_fetchable
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_channel
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_dm
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_removal_not_in_users_all
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_invalid_user - h...
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_cannot_remove_last_owner
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_cannot_remove_user_nonowner
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_invalid_token - ...
ERROR http_tests/admin_tests/test_admin_userpermission_change.py::test_successful_permission_change
ERROR http_tests/admin_tests/test_admin_userpermission_change.py::test_changing_to_same_permission_idempotent
ERROR http_tests/admin_tests/test_admin_userpermission_change.py::test_nonowner_cant_change_permissions
ERROR http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_user
ERROR http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_permission
ERROR http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_token
ERROR http_tests/auth_tests/test_auth_login.py::test_successful_login - http_...
ERROR http_tests/auth_tests/test_auth_login.py::test_can_have_two_sessions - ...
ERROR http_tests/auth_tests/test_auth_login.py::test_registered_but_incorrect_password
ERROR http_tests/auth_tests/test_auth_logout.py::test_successful_logout - htt...
ERROR http_tests/auth_tests/test_auth_logout.py::test_not_logged_in_logout - ...
ERROR http_tests/auth_tests/test_auth_register.py::test_successful_registration
ERROR http_tests/auth_tests/test_passwordreset_request.py::test_return_format_correct
ERROR http_tests/auth_tests/test_passwordreset_request.py::test_password_request_logs_out_everywhere
ERROR http_tests/channel_tests/test_channel_addowner.py::test_channel_owner_can_addowner_when_member
ERROR http_tests/channel_tests/test_channel_addowner.py::test_non_member_cannot_add_owner
ERROR http_tests/channel_tests/test_channel_addowner.py::test_member_cannot_add_owner
ERROR http_tests/channel_tests/test_channel_addowner.py::test_cannot_addowner_prexisting_channel_owner
ERROR http_tests/channel_tests/test_channel_addowner.py::test_with_invalid_channel_id
ERROR http_tests/channel_tests/test_channel_addowner.py::test_invalid_token
ERROR http_tests/channel_tests/test_channel_details.py::test_member_successful
ERROR http_tests/channel_tests/test_channel_details.py::test_non_member_not_successful
ERROR http_tests/channel_tests/test_channel_details.py::test_invalid_channel_id
ERROR http_tests/channel_tests/test_channel_details.py::test_invalid_token - ...
ERROR http_tests/channel_tests/test_channel_invite.py::test_invite_global_owner
ERROR http_tests/channel_tests/test_channel_invite.py::test_invite_global_member
ERROR http_tests/channel_tests/test_channel_invite.py::test_invitation_from_non_channel_member
ERROR http_tests/channel_tests/test_channel_invite.py::test_channel_id_invalid
ERROR http_tests/channel_tests/test_channel_invite.py::test_u_id_invalid - ht...
ERROR http_tests/channel_tests/test_channel_invite.py::test_invalidated_token
ERROR http_tests/channel_tests/test_channel_join.py::test_global_owner_join_channel_public
ERROR http_tests/channel_tests/test_channel_join.py::test_global_owner_join_channel_private
ERROR http_tests/channel_tests/test_channel_join.py::test_global_member_join_public
ERROR http_tests/channel_tests/test_channel_join.py::test_join_invalid_channel_id
ERROR http_tests/channel_tests/test_channel_join.py::test_invalidated_token
ERROR http_tests/channel_tests/test_channel_leave.py::test_member_leave_channel_successfully
ERROR http_tests/channel_tests/test_channel_leave.py::test_leave_channel_when_not_member
ERROR http_tests/channel_tests/test_channel_leave.py::test_invalid_channel_id
ERROR http_tests/channel_tests/test_channel_leave.py::test_invalid_token - ht...
ERROR http_tests/channel_tests/test_channel_messages.py::test_under_fifty_messages_sent
ERROR http_tests/channel_tests/test_channel_messages.py::test_over_fifty_messages_sent
ERROR http_tests/channel_tests/test_channel_messages.py::test_removal_by_edit_reflected
ERROR http_tests/channel_tests/test_channel_messages.py::test_removal_by_deletion_reflected
ERROR http_tests/channel_tests/test_channel_messages.py::test_input_error_when_start_greater_than_message_num
ERROR http_tests/channel_tests/test_channel_messages.py::test_access_error_when_user_is_non_member
ERROR http_tests/channel_tests/test_channel_messages.py::test_input_error_when_channel_id_invalid
ERROR http_tests/channel_tests/test_channel_messages.py::test_access_error_when_invalid_token_given
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_owner_can_remove_owner
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_global_owner_can_remove_owner
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_nonmember_cannot_remove_owner
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_member_cannot_remove_owner
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_cannot_remove_last_owner
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_cannot_remove_non_owner
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_with_invalid_channel_id
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_invalidated_token
ERROR http_tests/channels_tests/test_channels_create.py::test_create_channel[True-andys room]
ERROR http_tests/channels_tests/test_channels_create.py::test_create_channel[False-andys room]
ERROR http_tests/channels_tests/test_channels_create.py::test_channel_name_length[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG]
ERROR http_tests/channels_tests/test_channels_create.py::test_channel_name_length[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG]
ERROR http_tests/channels_tests/test_channels_create.py::test_invalidated_token
ERROR http_tests/channels_tests/test_channels_list.py::test_when_in_no_channels
ERROR http_tests/channels_tests/test_channels_list.py::test_when_in_one_channel[True-andy]
ERROR http_tests/channels_tests/test_channels_list.py::test_when_in_one_channel[False-andy]
ERROR http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[False-True-ZERG-andy]
ERROR http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[False-False-ZERG-andy]
ERROR http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[True-True-ZERG-andy]
ERROR http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[True-False-ZERG-andy]
ERROR http_tests/channels_tests/test_channels_list.py::test_list_after_leave_channel
ERROR http_tests/channels_tests/test_channels_list.py::test_invalidated_token
ERROR http_tests/channels_tests/test_channels_listall.py::test_when_no_channels
ERROR http_tests/channels_tests/test_channels_listall.py::test_when_one_channel_exists_private
ERROR http_tests/channels_tests/test_channels_listall.py::test_when_one_channel_exists_public
ERROR http_tests/channels_tests/test_channels_listall.py::test_when_multiple_channels_exist
ERROR http_tests/channels_tests/test_channels_listall.py::test_invalidated_token
ERROR http_tests/dm_tests/test_dm_create.py::test_successful_dm_creation - ht...
ERROR http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_single - h...
ERROR http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_multiple
ERROR http_tests/dm_tests/test_dm_create.py::test_dm_to_invalid_user - http_t...
ERROR http_tests/dm_tests/test_dm_create.py::test_invalid_token - http_tests....
ERROR http_tests/dm_tests/test_dm_details.py::test_member_successful - http_t...
ERROR http_tests/dm_tests/test_dm_details.py::test_non_member_not_successful
ERROR http_tests/dm_tests/test_dm_details.py::test_invalid_dm_id - http_tests...
ERROR http_tests/dm_tests/test_dm_details.py::test_invalid_token - http_tests...
ERROR http_tests/dm_tests/test_dm_invite.py::test_invite_global_member - http...
ERROR http_tests/dm_tests/test_dm_invite.py::test_invitation_from_non_dm_member
ERROR http_tests/dm_tests/test_dm_invite.py::test_dm_id_invalid - http_tests....
ERROR http_tests/dm_tests/test_dm_invite.py::test_u_id_invalid - http_tests.e...
ERROR http_tests/dm_tests/test_dm_invite.py::test_invalidated_token - http_te...
ERROR http_tests/dm_tests/test_dm_leave.py::test_member_leave_dm_successfully
ERROR http_tests/dm_tests/test_dm_leave.py::test_leave_channel_when_not_member
ERROR http_tests/dm_tests/test_dm_leave.py::test_invalid_dm_id - http_tests.e...
ERROR http_tests/dm_tests/test_dm_leave.py::test_invalid_token - http_tests.e...
ERROR http_tests/dm_tests/test_dm_list.py::test_when_in_no_dms - http_tests.e...
ERROR http_tests/dm_tests/test_dm_list.py::test_when_in_one_dm - http_tests.e...
ERROR http_tests/dm_tests/test_dm_list.py::test_when_in_multiple_dms - http_t...
ERROR http_tests/dm_tests/test_dm_list.py::test_list_after_leave_dm - http_te...
ERROR http_tests/dm_tests/test_dm_list.py::test_invalidated_token - http_test...
ERROR http_tests/dm_tests/test_dm_messages.py::test_under_fifty_messages_sent
ERROR http_tests/dm_tests/test_dm_messages.py::test_over_fifty_messages_sent
ERROR http_tests/dm_tests/test_dm_messages.py::test_removal_by_edit_reflected
ERROR http_tests/dm_tests/test_dm_messages.py::test_removal_by_deletion_reflected
ERROR http_tests/dm_tests/test_dm_messages.py::test_input_error_when_start_greater_than_message_num
ERROR http_tests/dm_tests/test_dm_messages.py::test_access_error_when_user_is_non_member
ERROR http_tests/dm_tests/test_dm_messages.py::test_input_error_when_dm_id_invalid
ERROR http_tests/dm_tests/test_dm_messages.py::test_access_error_when_invalid_token_given
ERROR http_tests/dm_tests/test_dm_remove.py::test_successful_dm_removal - htt...
ERROR http_tests/dm_tests/test_dm_remove.py::test_removal_removes_messages - ...
ERROR http_tests/dm_tests/test_dm_remove.py::test_nonowner_cannot_remove_dm
ERROR http_tests/dm_tests/test_dm_remove.py::test_invalid_dm_id - http_tests....
ERROR http_tests/dm_tests/test_dm_remove.py::test_invalid_token - http_tests....
ERROR http_tests/message_tests/test_message_edit.py::test_original_poster_can_edit_message
ERROR http_tests/message_tests/test_message_edit.py::test_owner_can_edit_members_message
ERROR http_tests/message_tests/test_message_edit.py::test_global_owner_can_edit_members_message
ERROR http_tests/message_tests/test_message_edit.py::test_empty_edit_deletes_message
ERROR http_tests/message_tests/test_message_edit.py::test_invalid_message_length
ERROR http_tests/message_tests/test_message_edit.py::test_cannot_edit_deleted_message
ERROR http_tests/message_tests/test_message_edit.py::test_nonowner_nonposter_cant_edit
ERROR http_tests/message_tests/test_message_edit.py::test_invalid_token - htt...
ERROR http_tests/message_tests/test_message_meta.py::test_message_ids_unique
ERROR http_tests/message_tests/test_message_pin.py::test_successful_pin_in_channel
ERROR http_tests/message_tests/test_message_pin.py::test_successful_pin_in_dm
ERROR http_tests/message_tests/test_message_pin.py::test_invalid_message_id
ERROR http_tests/message_tests/test_message_pin.py::test_cannot_pin_twice - h...
ERROR http_tests/message_tests/test_message_pin.py::test_channel_member_cant_pin
ERROR http_tests/message_tests/test_message_pin.py::test_dm_member_cant_pin
ERROR http_tests/message_tests/test_message_pin.py::test_nonmember_cant_pin
ERROR http_tests/message_tests/test_message_pin.py::test_invalid_token - http...
ERROR http_tests/message_tests/test_message_react.py::test_successful_react_in_channel
ERROR http_tests/message_tests/test_message_react.py::test_successful_react_to_dm_message
ERROR http_tests/message_tests/test_message_react.py::test_invalid_message_id
ERROR http_tests/message_tests/test_message_react.py::test_invalid_react_id
ERROR http_tests/message_tests/test_message_react.py::test_cant_react_twice
ERROR http_tests/message_tests/test_message_react.py::test_nonmember_cannot_react
ERROR http_tests/message_tests/test_message_react.py::test_invalid_token - ht...
ERROR http_tests/message_tests/test_message_remove.py::test_original_poster_can_remove_message
ERROR http_tests/message_tests/test_message_remove.py::test_owner_can_remove_members_message
ERROR http_tests/message_tests/test_message_remove.py::test_global_owner_can_remove_members_message
ERROR http_tests/message_tests/test_message_remove.py::test_cannot_remove_deleted_message
ERROR http_tests/message_tests/test_message_remove.py::test_nonowner_nonposter_cant_remove_message
ERROR http_tests/message_tests/test_message_remove.py::test_invalid_token - h...
ERROR http_tests/message_tests/test_message_send.py::test_valid_message - htt...
ERROR http_tests/message_tests/test_message_send.py::test_nonmember_post - ht...
ERROR http_tests/message_tests/test_message_send.py::test_invalid_message - h...
ERROR http_tests/message_tests/test_message_send.py::test_invalid_token - htt...
ERROR http_tests/message_tests/test_message_senddm.py::test_valid_message - h...
ERROR http_tests/message_tests/test_message_senddm.py::test_nonmember_post - ...
ERROR http_tests/message_tests/test_message_senddm.py::test_invalid_message
ERROR http_tests/message_tests/test_message_senddm.py::test_invalid_token - h...
ERROR http_tests/message_tests/test_message_sendlater.py::test_valid_future_message
ERROR http_tests/message_tests/test_message_sendlater.py::test_nonmeber_cannot_sendlater
ERROR http_tests/message_tests/test_message_sendlater.py::test_cannot_time_travel
ERROR http_tests/message_tests/test_message_sendlater.py::test_message_too_long
ERROR http_tests/message_tests/test_message_sendlater.py::test_invalid_channel
ERROR http_tests/message_tests/test_message_sendlater.py::test_invalid_token
ERROR http_tests/message_tests/test_message_sendlaterdm.py::test_valid_future_message
ERROR http_tests/message_tests/test_message_sendlaterdm.py::test_nonmeber_cannot_sendlater
ERROR http_tests/message_tests/test_message_sendlaterdm.py::test_cannot_time_travel
ERROR http_tests/message_tests/test_message_sendlaterdm.py::test_message_too_long
ERROR http_tests/message_tests/test_message_sendlaterdm.py::test_invalid_dm
ERROR http_tests/message_tests/test_message_sendlaterdm.py::test_invalid_token
ERROR http_tests/message_tests/test_message_share.py::test_successful_share_to_channel
ERROR http_tests/message_tests/test_message_share.py::test_successful_share_to_dm
ERROR http_tests/message_tests/test_message_share.py::test_successful_cross_share[True]
ERROR http_tests/message_tests/test_message_share.py::test_successful_cross_share[False]
ERROR http_tests/message_tests/test_message_share.py::test_cannot_share_to_unjoined_dm
ERROR http_tests/message_tests/test_message_share.py::test_cannot_share_to_unjoined_channel
ERROR http_tests/message_tests/test_message_share.py::test_invalid_token - ht...
ERROR http_tests/message_tests/test_message_unpin.py::test_successful_unpin_in_channel
ERROR http_tests/message_tests/test_message_unpin.py::test_successful_unpin_in_dm
ERROR http_tests/message_tests/test_message_unpin.py::test_invalid_message_id
ERROR http_tests/message_tests/test_message_unpin.py::test_cannot_unpin_twice
ERROR http_tests/message_tests/test_message_unpin.py::test_channel_member_cant_unpin
ERROR http_tests/message_tests/test_message_unpin.py::test_dm_member_cant_unpin
ERROR http_tests/message_tests/test_message_unpin.py::test_nonmember_cant_unpin
ERROR http_tests/message_tests/test_message_unpin.py::test_invalid_token - ht...
ERROR http_tests/message_tests/test_message_unreact.py::test_successful_unreact_in_channel
ERROR http_tests/message_tests/test_message_unreact.py::test_successful_unreact_to_dm_message
ERROR http_tests/message_tests/test_message_unreact.py::test_invalid_message_id
ERROR http_tests/message_tests/test_message_unreact.py::test_invalid_react_id
ERROR http_tests/message_tests/test_message_unreact.py::test_cant_unreact_twice
ERROR http_tests/message_tests/test_message_unreact.py::test_nonmember_cannot_unreact
ERROR http_tests/message_tests/test_message_unreact.py::test_invalid_token - ...
ERROR http_tests/other_tests/test_clear.py::test_clear_works - http_tests.err...
ERROR http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_send_triggers_notification
ERROR http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_senddm_triggers_notification
ERROR http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_sendlater_triggers_notification
ERROR http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_sendlaterdm_triggers_notification
ERROR http_tests/other_tests/test_notifications_get.py::test_tag_notification_message_preview_length[a small message]
ERROR http_tests/other_tests/test_notifications_get.py::test_tag_notification_message_preview_length[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]
ERROR http_tests/other_tests/test_notifications_get.py::test_react_triggers_notification[ch]
ERROR http_tests/other_tests/test_notifications_get.py::test_react_triggers_notification[dm]
ERROR http_tests/other_tests/test_notifications_get.py::test_add_thru_ch_invite_triggers_notification
ERROR http_tests/other_tests/test_notifications_get.py::test_add_thru_dm_create_triggers_notification
ERROR http_tests/other_tests/test_notifications_get.py::test_add_thru_dm_invite_triggers_notification
ERROR http_tests/other_tests/test_notifications_get.py::test_most_recent_20_notifications_fetched
ERROR http_tests/other_tests/test_notifications_get.py::test_invalid_token - ...
ERROR http_tests/other_tests/test_search.py::test_no_matches - http_tests.err...
ERROR http_tests/other_tests/test_search.py::test_single_match - http_tests.e...
ERROR http_tests/other_tests/test_search.py::test_multiple_matches - http_tes...
ERROR http_tests/other_tests/test_search.py::test_multiple_channels_joined - ...
ERROR http_tests/other_tests/test_search.py::test_search_includes_only_joined_channels
ERROR http_tests/other_tests/test_search.py::test_search_matches_more_than_just_authorised_user
ERROR http_tests/other_tests/test_search.py::test_invalid_search[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa]
ERROR http_tests/other_tests/test_search.py::test_invalid_token - http_tests....
ERROR http_tests/other_tests/test_users_all.py::test_successful_users_all - h...
ERROR http_tests/other_tests/test_users_all.py::test_invalid_token - http_tes...
ERROR http_tests/standup_tests/test_standup_active.py::test_correct_return_format[True]
ERROR http_tests/standup_tests/test_standup_active.py::test_correct_return_format[False]
ERROR http_tests/standup_tests/test_standup_active.py::test_active_standup - ...
ERROR http_tests/standup_tests/test_standup_active.py::test_inactive_standup
ERROR http_tests/standup_tests/test_standup_active.py::test_invalid_channel_id
ERROR http_tests/standup_tests/test_standup_active.py::test_invalid_token - h...
ERROR http_tests/standup_tests/test_standup_send.py::test_messages_buffered_and_displayed_correctly
ERROR http_tests/standup_tests/test_standup_send.py::test_return_format - htt...
ERROR http_tests/standup_tests/test_standup_send.py::test_non_member_cannot_standup_send
ERROR http_tests/standup_tests/test_standup_send.py::test_send_when_standup_inactive
ERROR http_tests/standup_tests/test_standup_send.py::test_invalid_message_length
ERROR http_tests/standup_tests/test_standup_send.py::test_invalid_channel_id
ERROR http_tests/standup_tests/test_standup_send.py::test_invalid_token - htt...
ERROR http_tests/standup_tests/test_standup_start.py::test_standup_start_return_format
ERROR http_tests/standup_tests/test_standup_start.py::test_standup_restartable_after_lapse
ERROR http_tests/standup_tests/test_standup_start.py::test_standup_affects_only_one_channel
ERROR http_tests/standup_tests/test_standup_start.py::test_standup_cannot_be_started_in_dm
ERROR http_tests/standup_tests/test_standup_start.py::test_nonmember_cannot_start_standup
ERROR http_tests/standup_tests/test_standup_start.py::test_cannot_start_standup_when_already_active
ERROR http_tests/standup_tests/test_standup_start.py::test_invalid_channel_id
ERROR http_tests/standup_tests/test_standup_start.py::test_invalid_token - ht...
ERROR http_tests/stats_tests/test_user_stats.py::test_return_type_correct - h...
ERROR http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channels_create
ERROR http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_join
ERROR http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_invite
ERROR http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_leave
ERROR http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_add_owner
ERROR http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_create
ERROR http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_invite
ERROR http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_leave - ...
ERROR http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_remove
ERROR http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_send
ERROR http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_sendlater
ERROR http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_senddm
ERROR http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_senddmlater
ERROR http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_share
ERROR http_tests/stats_tests/test_user_stats.py::test_messages_tracked_standup_finish
ERROR http_tests/stats_tests/test_user_stats.py::test_involvement_tracked - h...
ERROR http_tests/stats_tests/test_user_stats.py::test_invalid_token - http_te...
ERROR http_tests/user_tests/test_user_profile.py::test_user_profile_valid - h...
ERROR http_tests/user_tests/test_user_profile.py::test_invalid_user - http_te...
ERROR http_tests/user_tests/test_user_profile.py::test_invalid_token - http_t...
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_successful_email_change
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_cannot_change_to_taken_email
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[]
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[bob]
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[a@mgail.com]
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[ab.com]
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[@gmail.com]
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[ab@ab@gmail.com]
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_invalid_token
ERROR http_tests/user_tests/test_user_profile_sethandle.py::test_successful_handle_change
ERROR http_tests/user_tests/test_user_profile_sethandle.py::test_cannot_change_to_taken_handle
ERROR http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[]
ERROR http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[a]
ERROR http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[aa]
ERROR http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[aaaaaaaaaaaaaaaaaaaaa]
ERROR http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_token
ERROR http_tests/user_tests/test_user_profile_setname.py::test_user_profile_setname_valid_name
ERROR http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[-]
ERROR http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[-MRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMR]
ERROR http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[PotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHead-]
ERROR http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[PotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHead-MRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMR]
ERROR http_tests/user_tests/test_user_profile_setname.py::test_invalid_token
ERROR http_tests/user_tests/test_user_profile_uploadphoto.py::test_return_format_correct
ERROR http_tests/user_tests/test_user_profile_uploadphoto.py::test_cannot_upload_non_jpeg
ERROR http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[-1000-0-0-0]
ERROR http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[0--1000-0-0]
ERROR http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[0-0--1000-0]
ERROR http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[0-0-0--1000]
ERROR http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_url
ERROR http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_token
============ 3 failed, 30 passed, 22 skipped, 288 errors in 15.60s =============
